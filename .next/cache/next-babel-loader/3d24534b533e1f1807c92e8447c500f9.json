{"ast":null,"code":"function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nvar butter = require('buttercms')(\"8d6d186981c0902966f48b2f7db8a6aaa5205822\");\n\nexport function getCategories() {\n  return _getCategories.apply(this, arguments);\n}\n\nfunction _getCategories() {\n  _getCategories = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n    var fetchCategories, categoriesData, returnedData;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return butter.content.retrieve(['categories']);\n\n          case 2:\n            fetchCategories = _context.sent;\n            _context.next = 5;\n            return fetchCategories;\n\n          case 5:\n            categoriesData = _context.sent;\n            returnedData = categoriesData.data.data.categories;\n            return _context.abrupt(\"return\", returnedData);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getCategories.apply(this, arguments);\n}\n\nexport function getSubcategories() {\n  return _getSubcategories.apply(this, arguments);\n}\n\nfunction _getSubcategories() {\n  _getSubcategories = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n    var fetchSubcategories, subcategoriesData, returnedData;\n    return regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return butter.content.retrieve(['subcategories']);\n\n          case 2:\n            fetchSubcategories = _context2.sent;\n            _context2.next = 5;\n            return fetchSubcategories;\n\n          case 5:\n            subcategoriesData = _context2.sent;\n            returnedData = subcategoriesData.data.data.subcategories;\n            return _context2.abrupt(\"return\", returnedData);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getSubcategories.apply(this, arguments);\n}\n\nexport function getCategory(_x) {\n  return _getCategory.apply(this, arguments);\n}\n\nfunction _getCategory() {\n  _getCategory = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(id) {\n    var fetchCategories, categoriesData, returnedData;\n    return regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return butter.content.retrieve(['categories'], {\n              \"fields.id\": id\n            });\n\n          case 2:\n            fetchCategories = _context3.sent;\n            _context3.next = 5;\n            return fetchCategories;\n\n          case 5:\n            categoriesData = _context3.sent;\n            returnedData = categoriesData.data.data.categories;\n            return _context3.abrupt(\"return\", returnedData);\n\n          case 8:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _getCategory.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/bryanatencia/demo/how-to-hub-butter-next-demo/functions/index.js"],"names":["butter","require","getCategories","content","retrieve","fetchCategories","categoriesData","returnedData","data","categories","getSubcategories","fetchSubcategories","subcategoriesData","subcategories","getCategory","id"],"mappings":";;;;AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,WAAD,CAAP,CAAqB,0CAArB,CAAb;;AAEA,gBAAsBC,aAAtB;AAAA;AAAA;;;2EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBF,MAAM,CAACG,OAAP,CAAeC,QAAf,CAAwB,CAAC,YAAD,CAAxB,CADvB;;AAAA;AACDC,YAAAA,eADC;AAAA;AAAA,mBAEsBA,eAFtB;;AAAA;AAEDC,YAAAA,cAFC;AAGDC,YAAAA,YAHC,GAGcD,cAAc,CAACE,IAAf,CAAoBA,IAApB,CAAyBC,UAHvC;AAAA,6CAKEF,YALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsBG,gBAAtB;AAAA;AAAA;;;8EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC0BV,MAAM,CAACG,OAAP,CAAeC,QAAf,CAAwB,CAAC,eAAD,CAAxB,CAD1B;;AAAA;AACDO,YAAAA,kBADC;AAAA;AAAA,mBAEyBA,kBAFzB;;AAAA;AAEDC,YAAAA,iBAFC;AAGDL,YAAAA,YAHC,GAGcK,iBAAiB,CAACJ,IAAlB,CAAuBA,IAAvB,CAA4BK,aAH1C;AAAA,8CAKEN,YALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAQP,gBAAsBO,WAAtB;AAAA;AAAA;;;yEAAO,kBAA2BC,EAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACuBf,MAAM,CAACG,OAAP,CAAeC,QAAf,CAAwB,CAAC,YAAD,CAAxB,EAAwC;AAAE,2BAAaW;AAAf,aAAxC,CADvB;;AAAA;AACDV,YAAAA,eADC;AAAA;AAAA,mBAEsBA,eAFtB;;AAAA;AAEDC,YAAAA,cAFC;AAGDC,YAAAA,YAHC,GAGcD,cAAc,CAACE,IAAf,CAAoBA,IAApB,CAAyBC,UAHvC;AAAA,8CAKEF,YALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["var butter = require('buttercms')(\"8d6d186981c0902966f48b2f7db8a6aaa5205822\");\n\nexport async function getCategories() {\n  let fetchCategories = await butter.content.retrieve(['categories'])\n  let categoriesData = await fetchCategories\n  let returnedData = categoriesData.data.data.categories\n\n  return returnedData\n}\n\nexport async function getSubcategories() {\n  let fetchSubcategories = await butter.content.retrieve(['subcategories'])\n  let subcategoriesData = await fetchSubcategories\n  let returnedData = subcategoriesData.data.data.subcategories\n\n  return returnedData\n}\n\nexport async function getCategory(id) {\n  let fetchCategories = await butter.content.retrieve(['categories'], { \"fields.id\": id })\n  let categoriesData = await fetchCategories\n  let returnedData = categoriesData.data.data.categories\n\n  return returnedData\n}\n"]},"metadata":{},"sourceType":"module"}